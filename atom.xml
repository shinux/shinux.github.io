<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Sinux</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2017-03-22T09:44:12.000Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Sinux</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>elasticsearch upgrade notes</title>
    <link href="http://yoursite.com/2017/03/22/upgrade_elasticsearch_note/"/>
    <id>http://yoursite.com/2017/03/22/upgrade_elasticsearch_note/</id>
    <published>2017-03-22T15:46:16.000Z</published>
    <updated>2017-03-22T09:44:12.000Z</updated>
    
    <content type="html"><![CDATA[<h4 id="Download"><a href="#Download" class="headerlink" title="Download"></a>Download</h4><ul>
<li>本地下载 elasticsearch 新版本，传到服务器上解压，同时 chown -R 整个文件夹拥有者为非 root</li>
<li>所有 plugins checkout 到新版本，重新编译打包，例如 ik，然后 scp 上传到新版 elasticsearch 的 plugins 中并解压</li>
</ul>
<h4 id="Migration"><a href="#Migration" class="headerlink" title="Migration"></a>Migration</h4><ul>
<li>这两步<a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/restart-upgrade.html" target="_blank" rel="external">严格按照文档</a>，disable shard allocation 和 synced flush，方便到新的集群中快速 recovery</li>
<li>停掉旧版本的 cluster</li>
<li>完整 copy data 文件夹到新版本 elasticsearch 文件夹中</li>
<li>config/elasticsearch.yml 的内容需要针对新版本做出调整</li>
</ul>
<h4 id="Run"><a href="#Run" class="headerlink" title="Run"></a>Run</h4><ul>
<li>开启新版 elasticsearch ，同时 enable shard allocation</li>
<li>[optional] open all indices: <code>curl -XPOST &quot;http://localhost:9200/_all/_open&quot;</code></li>
<li>等待 shard recovery，在 synced flush 的帮助下这步不会太久</li>
</ul>
<p>从 2.0 -&gt; 5.2 整体来说没有想象中那么困难，当然原本的环境就是单点大法…所以过程比较顺畅，有一些小坑，错误都比较明显。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;Download&quot;&gt;&lt;a href=&quot;#Download&quot; class=&quot;headerlink&quot; title=&quot;Download&quot;&gt;&lt;/a&gt;Download&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;本地下载 elasticsearch 新版本，传到服务器上解压，同时 chown
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Some issues regarding upgrade elasticsearch</title>
    <link href="http://yoursite.com/2017/03/03/some_issues_regarding_uprade_elasticsearch/"/>
    <id>http://yoursite.com/2017/03/03/some_issues_regarding_uprade_elasticsearch/</id>
    <published>2017-03-03T15:46:16.000Z</published>
    <updated>2017-03-21T05:15:47.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="script-language"><a href="#script-language" class="headerlink" title="script language"></a>script language</h3><p>从 2.0.1 升级到 5.1.1 有一阵子了，今天发现了一个存在比较久的问题，就是诸如 update 包括 bulk update 操作，不能被正常的执行。问题集中在那些在 body 中使用 script 的 query，而直接全文更新的则没有问题。例如，对 list 类型的 document 进行局部更新:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">POST index/type/id/_update</div><div class="line">&#123;</div><div class="line">    &quot;script&quot;: &quot;ctx._source.tags -= tag&quot;,</div><div class="line">    &quot;params&quot; : &#123;</div><div class="line">        &quot;tag&quot; : &quot;blue&quot;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这样的使用在 2.0.1 中是没问题的，然而在 5.x 中却报错：<code>Variable [tag] is not defined.</code> 无法执行这个 script，后来发现了 default lang 不再是 groovy 而变成了 painless ，而 painless 的取值需要携带 key ，即 params.tag 这样才可以正常找到值。那么 groovy 为什么不再是 default 还被新版本中标记为 deprecated 了呢……要知道 groovy 之前替换掉 mvel 的理由是足够快而且简单……</p>
<p>先说一下什么是 sandboxed language </p>
<blockquote>
<p>沙盒是在受限的安全环境中运行应用程序的一种做法，这种做法是要限制授予应用程序的代码访问权限。</p>
</blockquote>
<p>像 groovy 和 JavaScript 这类脚本语言它们本身都不是 sandboxed，它们可以做很多系统级别的不止是读写、网络请求的操作，这样就给基于 JAVA 并且在运行中默认开启 <a href="https://docs.oracle.com/javase/tutorial/essential/environment/security.html" target="_blank" rel="external">The Security Manager</a> 的 elasticsearch 带来很大的安全隐患，比如在脚本中随便加一句 infinite loop ，服务器可能就表现成拒绝访问的状态，所以在之前的版本中 elasticsearch 为 groovy 加入了沙盒控制一些权限，然而后面由于权限限制不够，还是出现了一些问题23333。</p>
<p>虽然 5.x 仍然内置 groovy ，但是考虑到 elasticsearch script 的来源，可以是 inline、store 、还有 file，前两个就不说了，一个是 query 中直接写进去的像我上面的例子，另一个也是以数据的形式存在某个 cluster state 的 _script 节点下，而 file 的形式是配置在 elasticsearch 的 config 文件夹中，所以从安全的角度，elasticsearch 5.x 只对 file script 默认允许执行 groovy 。</p>
<p>至于开头的 query ，如果不考虑安全性，例如默认我们的 elasticsearch 运行与一个相对隔离的环境下，如果还想用 inline groovy ，就可以为 groovy 单独开启一个配置 <code>script.engine.groovy.inline: true</code> 或者更宽泛的，针对所有 inline script 的配置<code>script.inline: true</code>，那么为上面的 script 声明一下 lang 就可以成功执行了（在 Python 和 Node.js 包中拼 dict 和 object 也是一样）：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">POST index/type/id/_update</div><div class="line">&#123;</div><div class="line">    &quot;script&quot; :&#123;</div><div class="line">      &quot;inline&quot;: &quot;ctx._source.tags -= tag&quot;,</div><div class="line">      &quot;lang&quot;: &quot;groovy&quot;,</div><div class="line">      &quot;params&quot; : &#123;</div><div class="line">          &quot;tag&quot; : &quot;blue&quot;</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>等 painless 相对稳定了，直接切换过去就可以了，毕竟语法都类似，而且还安全。</p>
<h3 id="upsert-element-to-exist-document"><a href="#upsert-element-to-exist-document" class="headerlink" title="upsert element to exist document"></a>upsert element to exist document</h3><p>一个已经存在的 document 可能有一个 tags 的 element ，它是一个 Array 形态，现在我们想 upsert 某个 tag 进去。</p>
<p>这种 array 的操作通常是用 script 操作的，于是很直观地用到文档中的 upsert:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">&#123;</div><div class="line">  &quot;script&quot;: &#123;</div><div class="line">    &quot;inline&quot;: &quot;ctx._source.tags += tag&quot;,</div><div class="line">    &quot;lang&quot;: &quot;groovy&quot;,</div><div class="line">    &quot;params&quot;: &#123;</div><div class="line">      &quot;tag&quot;: &quot;皮皮虾&quot;</div><div class="line">    &#125;</div><div class="line">  &#125;,</div><div class="line">  &quot;upsert&quot;: &#123;</div><div class="line">    &quot;tags&quot;: [&quot;皮皮虾&quot;]</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>然而 script 总是执行而 upsert 不执行，原因是 document 已经存在了，这个 upsert 只是针对当 document 不存在时，所以还是要把逻辑做在 script 中:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">&#123;</div><div class="line">  &quot;script&quot;: &#123;</div><div class="line">    &quot;inline&quot;: &quot;if (ctx._source.tags) &#123;ctx._source.tags += tag;&#125; else &#123;ctx._source.tags = [tag]&#125;&quot;,</div><div class="line">    &quot;lang&quot;: &quot;groovy&quot;,</div><div class="line">    &quot;params&quot;: &#123;</div><div class="line">      &quot;tag&quot;: &quot;皮皮虾&quot;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;script-language&quot;&gt;&lt;a href=&quot;#script-language&quot; class=&quot;headerlink&quot; title=&quot;script language&quot;&gt;&lt;/a&gt;script language&lt;/h3&gt;&lt;p&gt;从 2.0.1 升级到 5.1.1 
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Implement &quot;or&quot; operator in Elasticsearch</title>
    <link href="http://yoursite.com/2016/11/16/implement_or_operator_in_elasticsearch/"/>
    <id>http://yoursite.com/2016/11/16/implement_or_operator_in_elasticsearch/</id>
    <published>2016-11-16T07:46:16.000Z</published>
    <updated>2016-11-24T06:57:56.000Z</updated>
    
    <content type="html"><![CDATA[<p>以下内容基于 Elasticsearch 2.0.1 。</p>
<p>首先是 <code>or filter</code> 已经变成了 <code>bool</code> ，它是专门用来合并 queries ，支持 or、and、not 这类操作符的，大概相当于 <code>()</code>(?).</p>
<ul>
<li><code>bool</code> 中的 <code>must</code> 就等于 SQL 中的 <code>AND</code></li>
<li>而 <code>should</code> 就相当于 SQL 中的 <code>OR</code></li>
<li><code>terms</code> 用来 match 任一出现在 simple type array (not object) 中的 doc</li>
</ul>
<p>当然还涉及到搜索结果评分等，但是这里不提这些。</p>
<p>现在遇到的情景大概就是想搜索多个空格分隔的关键字，任何一个 field 满足任一个关键字则匹配成功，返回所有匹配成功的结果和它们的 highlight 字段。</p>
<p>首先是对搜索内容做一点微不足道的处理:</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="keyword">const</span> queries = <span class="string">'some keywords'</span>.trim().split(<span class="regexp">/\s+/</span>).map(<span class="function">(<span class="params">query</span>) =&gt;</span> query.lowerCase());</div><div class="line"><span class="keyword">const</span> queryString = queries.join(<span class="string">' OR '</span>);</div></pre></td></tr></table></figure>
<p>保持所有 query 包裹在 bool 中，把上面的两个变量用在 POST body 中，curl 同理:</p>
<figure class="highlight"><table><tr><td class="code"><pre><div class="line">&#123;</div><div class="line">    "index": "index",</div><div class="line">    "from": 11,</div><div class="line">    "size": 20,</div><div class="line">    "_source": false,</div><div class="line">    "body": &#123;</div><div class="line">        "query": &#123;</div><div class="line">            "bool": &#123;</div><div class="line">            "should": [</div><div class="line">                &#123;</div><div class="line">                    "terms": &#123;</div><div class="line">                        "tags": queries,</div><div class="line">                    &#125;,</div><div class="line">                &#125;,</div><div class="line">                &#123;</div><div class="line">                    "query_string": &#123;</div><div class="line">                        "query": queryString,</div><div class="line">                        "fields": ["name^5", "name.analyzed^5", "email", "phone", "content"],</div><div class="line">                        "analyzer": "whitespace",</div><div class="line">                    &#125;,</div><div class="line">                &#125;,</div><div class="line">            ],</div><div class="line">            "minimum_should_match": 1,</div><div class="line">            &#125;</div><div class="line">        &#125;,</div><div class="line">        "highlight": &#123;</div><div class="line">            "fields": &#123;</div><div class="line">                "content": &#123; fragment_size: 18, number_of_fragments: 1 &#125;,</div><div class="line">                "name: &#123;&#125;,</div><div class="line">                "name.analyzed": &#123;&#125;,</div><div class="line">                "tags": &#123;&#125;,</div><div class="line">                "email": &#123;&#125;,</div><div class="line">                "phone": &#123;&#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>note: <code>minimum_should_match</code> may not be available in some version of elasticsearch.</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;以下内容基于 Elasticsearch 2.0.1 。&lt;/p&gt;
&lt;p&gt;首先是 &lt;code&gt;or filter&lt;/code&gt; 已经变成了 &lt;code&gt;bool&lt;/code&gt; ，它是专门用来合并 queries ，支持 or、and、not 这类操作符的，大概相当于 &lt;cod
    
    </summary>
    
    
  </entry>
  
</feed>
